//
// Generated by JTB 1.3.2
//

package spiglet.visitor;
import spiglet.main.AllProc;
import spiglet.main.ProcInfo;
import spiglet.main.Section;
import spiglet.syntaxtree.*;

/**
 * 
 * @author Yan Li
 * Build data flow diagram:
 * For ordinary code block, connect current section and the next one
 * For 'CJUMP' code, connect current section with two sections
 * For 'JUMP' code, connect the target section
 * 
 * Build initial active section for variables:
 * TEMP 0, TEMP 1, ... , TEMP 19 start with 0
 * TEMP 20, TEMP 21, ... , TEMP k, ... start with 'curr_pos + 1'
 */
public class DataFlow extends GJDepthFirst<String,String> {


    private int curStmt;

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public String visit(Goal n, String argu) {
        //MAIN stmt
        curStmt = 0;
        ProcInfo curProc = AllProc.get("MAIN");
        curProc.graph.insertEdge(curStmt, curStmt + 1);

        curStmt++;
        n.f1.accept(this, "MAIN");

        //END stmt
        curStmt++;
        n.f3.accept(this, argu);
        return null;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public String visit(StmtList n, String argu) {
        n.f0.accept(this, argu);
        return null;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public String visit(Procedure n, String argu) {
        curStmt = 0;
        n.f4.accept(this, n.f0.f0.toString());
        return null;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     */
    public String visit(Stmt n, String argu) {
        n.f0.accept(this, argu);
        curStmt++;
        return null;
    }

    /**
     * f0 -> "NOOP"
     */
    public String  visit(NoOpStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        return null;
    }

    /**
     * f0 -> "ERROR"
     */
    public String visit(ErrorStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        return null;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public String visit(CJumpStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        curProc.graph.insertEdge(curStmt, curProc.labelInfo.get(n.f2.f0.toString()));
        n.f1.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public String visit(JumpStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curProc.labelInfo.get(n.f1.f0.toString()));
        return null;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public String visit(HStoreStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        n.f1.accept(this, argu);
        n.f3.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public String visit(HLoadStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public String visit(MoveStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public String visit(PrintStmt n, String argu) {
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        n.f1.accept(this, argu);
        return null;
    }

    /**
     * f0 -> Call()
     *       | HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public String visit(Exp n, String argu) {
        n.f0.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public String visit(StmtExp n, String argu) {
        //BEGIN stmt
        ProcInfo curProc = AllProc.get(argu);
        curProc.graph.insertEdge(curStmt, curStmt + 1);

        curStmt++;
        n.f1.accept(this, argu);

        //RETURN ___ stmt
        curProc.graph.insertEdge(curStmt, curStmt + 1);
        n.f3.accept(this, argu);

        curStmt++;

        return null;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public String visit(Call n, String argu) {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public String visit(HAllocate n, String argu) {
        n.f1.accept(this, argu);
        return null;
    }

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    public String visit(BinOp n, String argu) {
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public String visit(Operator n, String argu) {
        return null;
    }

    /**
     * f0 -> Temp()
     *       | IntegerLiteral()
     *       | Label()
     */
    public String visit(SimpleExp n, String argu) {
        n.f0.accept(this, argu);
        return null;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public String visit(Temp n, String argu) {
        int tempID = Integer.parseInt(n.f1.f0.toString());
        ProcInfo curProc = AllProc.get(argu);
        if(!curProc.tempSec.containsKey(tempID)) {
            if(tempID < 20)
                curProc.tempSec.put(tempID, new Section(tempID, 0, curStmt));
            else //ordinary temporary variables
                curProc.tempSec.put(tempID, new Section(tempID, curStmt + 1, curStmt));
        }
        n.f1.accept(this, argu);
        return null;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, String argu) {
        return null;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Label n, String argu) {
        return null;
    }
}
